import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        String summaryMessage = "============= 订餐明细 =============\n";
        int totalPrice = 0;
        int price_full_reduction = 0;
        int price_half_designative = 0;
        List<SalesPromotion>list = this.salesPromotionRepository.findAll();
        String salesPromotion = "";
        for(int i = 0; i < inputs.size(); i++){
            String myItem = inputs.get(i).substring(0,8);
            int count = Integer.parseInt(inputs.get(i).substring(11));
            for(int j = 0; j < itemRepository.findAll().size(); j++){
                Item itemRepositoryItem = itemRepository.findAll().get(j);
                if(myItem.equals(itemRepositoryItem.getId())){
                    summaryMessage += itemRepositoryItem.getName()+" x " + count + " = " + (((int)itemRepositoryItem.getPrice()) * count)+"元\n";
                    totalPrice += itemRepositoryItem.getPrice() * count;
                    SalesPromotion salesPromotion_half_price = list.get(1);
                    List<String> relatedItems = salesPromotion_half_price.getRelatedItems();
                    if(relatedItems.contains(myItem)){
                        for(int k = 0; k < relatedItems.size(); k++){
                            if(relatedItems.get(k).equals(myItem)){
                                salesPromotion += itemRepositoryItem.getName()+"，";
                                price_half_designative += (itemRepositoryItem.getPrice() * count /2);
                                break;
                            }
                        }
                    }else{
                        price_half_designative += itemRepositoryItem.getPrice() * count;
                    }
                }
            }
        }
        if(totalPrice >= 30){
            price_full_reduction = totalPrice - 6;
            if(price_full_reduction <= price_half_designative){
                summaryMessage += "-----------------------------------\n使用优惠:\n满30减6元，省" + (totalPrice - price_full_reduction) + "元\n-----------------------------------\n总计：" + price_full_reduction + "元\n===================================";
            }else{
                summaryMessage += "-----------------------------------\n使用优惠:\n指定菜品半价(" + salesPromotion.substring(0, salesPromotion.length() - 1) + ")，省" + (totalPrice - price_half_designative) + "元\n-----------------------------------\n总计：" + price_half_designative + "元\n===================================";
            }
        }else{
            if(totalPrice > price_half_designative){
                summaryMessage += "-----------------------------------\n使用优惠:\n指定菜品半价(" + salesPromotion.substring(0, salesPromotion.length() - 1) + ")，省" + (totalPrice - price_half_designative) + "元\n-----------------------------------\n总计：" + price_half_designative + "元\n===================================";
            }else{
                summaryMessage += "-----------------------------------\n总计：" + totalPrice + "元\n===================================";
            }
        }
        return summaryMessage;
        //return null;
    }
}
